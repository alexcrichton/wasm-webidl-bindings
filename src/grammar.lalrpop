use crate::actions::Actions;
use std::str::FromStr;

grammar<A>(actions: &mut A)
    where A: Actions;

pub WebidlBindingsSection: A::WebidlBindingsSection =
    <types:WebidlTypeSubsection> <bindings:WebidlFunctionBindingsSubsection> =>
        actions.webidl_bindings_section(types, bindings);

WebidlTypeSubsection: A::WebidlTypeSubsection =
    <types:WebidlType*> => types.into();

pub(crate) WebidlType: A::WebidlType =
    "type" <name:Identifier?> <ty:WebidlCompoundType> =>
        actions.webidl_type(name, ty);

WebidlCompoundType: A::WebidlCompoundType = {
    <a:WebidlFunction> => a.into(),
    <a:WebidlDictionary> => a.into(),
    <a:WebidlEnumeration> => a.into(),
    <a:WebidlUnion> => a.into(),
};

WebidlFunction: A::WebidlFunction = {
    "("
        "func"
        <kind:WebidlFunctionKind?>
        <params:WebidlFunctionParams?>
        <result:WebidlFunctionResult?>
    ")" => actions.webidl_function(kind, params, result),
};

WebidlFunctionKind: A::WebidlFunctionKind = {
    <a:WebidlFunctionKindMethod> => a.into(),
    <a:WebidlFunctionKindConstructor> => a.into(),
    // NB: functions that lack a kind are implicitly static.
};

WebidlFunctionKindMethod: A::WebidlFunctionKindMethod =
    "(" "method" <ty:WebidlTypeRef> ")" =>
        actions.webidl_function_kind_method(ty);

WebidlFunctionKindConstructor: A::WebidlFunctionKindConstructor = {
    "(" "constructor" "default-new-target" ")" =>
        actions.webidl_function_kind_constructor_default_new_target(),
    // TODO: What are the non-default target forms?
};

WebidlFunctionParams: A::WebidlFunctionParams =
    "(" "param" <tys:WebidlTypeRef*> ")" =>
        actions.webidl_function_params(tys);

WebidlFunctionResult: A::WebidlFunctionResult =
    "(" "result" <ty:WebidlTypeRef> ")" =>
        actions.webidl_function_result(ty);

WebidlDictionary: A::WebidlDictionary =
    "(" "dict" <fields:WebidlDictionaryField*> ")" =>
        actions.webidl_dictionary(fields);

WebidlDictionaryField: A::WebidlDictionaryField =
    "(" "field" <name:WebidlDictionaryFieldName> <ty:WebidlTypeRef> ")" =>
        actions.webidl_dictionary_field(name, ty);

WebidlDictionaryFieldName: A::WebidlDictionaryFieldName =
    <name:QuotedString> =>
        actions.webidl_dictionary_field_name(&name[1..(name.len() - 1)]);

WebidlEnumeration: A::WebidlEnumeration =
    "(" "enum" <values:WebidlEnumerationValue*> ")" =>
        actions.webidl_enumeration(values);

WebidlEnumerationValue: A::WebidlEnumerationValue =
    <value:QuotedString> =>
        actions.webidl_enumeration_value(&value[1..(value.len() - 1)]);

WebidlUnion: A::WebidlUnion =
    "(" "union" <members:WebidlTypeRef*> ")" =>
        actions.webidl_union(members);

WebidlFunctionBindingsSubsection: A::WebidlFunctionBindingsSubsection =
    <bindings:FunctionBinding*>
    <binds:Bind*> =>
        actions.webidl_function_bindings_subsection(bindings, binds);

FunctionBinding: A::FunctionBinding = {
    <a:ImportBinding> => a.into(),
    <a:ExportBinding> => a.into(),
};

pub(crate) ImportBinding: A::ImportBinding =
    "func-binding"
    <name:Identifier?>
    "import"
    <wasm_ty:WasmTypeRef>
    <webidl_ty:WebidlTypeRef>
    "(" "param" <params:OutgoingBindingMap> ")"
    "(" "result" <result:IncomingBindingMap> ")" =>
        actions.import_binding(name, wasm_ty, webidl_ty, params, result);

pub(crate) ExportBinding: A::ExportBinding =
    "func-binding"
    <name:Identifier?>
    "export"
    <wasm_ty:WasmTypeRef>
    <webidl_ty:WebidlTypeRef>
    "(" "param" <params:IncomingBindingMap> ")"
    "(" "result" <result:OutgoingBindingMap> ")" =>
        actions.export_binding(name, wasm_ty, webidl_ty, params, result);

pub(crate) Bind: A::Bind =
    "bind" <func:WasmFuncRef> <binding:BindingRef> =>
        actions.bind(func, binding);

OutgoingBindingMap: A::OutgoingBindingMap =
    <bindings:OutgoingBindingExpression*> =>
        actions.outgoing_binding_map(bindings);

IncomingBindingMap: A::IncomingBindingMap =
    <bindings:IncomingBindingExpression*> =>
        actions.incoming_binding_map(bindings);

pub(crate) WebidlTypeRef: A::WebidlTypeRef = {
    <a:WebidlTypeRefNamed> => a.into(),
    <a:WebidlTypeRefIndexed> => a.into(),
};

WebidlTypeRefNamed: A::WebidlTypeRefNamed =
    <s:Identifier> =>
        actions.webidl_type_ref_named(s);

WebidlTypeRefIndexed: A::WebidlTypeRefIndexed =
    <idx: Unsigned> =>
        actions.webidl_type_ref_indexed(idx);

pub(crate) WasmTypeRef: A::WasmTypeRef = {
    <a:WasmTypeRefNamed> => a.into(),
    <a:WasmTypeRefIndexed> => a.into(),
};

WasmTypeRefNamed: A::WasmTypeRefNamed =
    <s:Identifier> =>
        actions.wasm_type_ref_named(s);

WasmTypeRefIndexed: A::WasmTypeRefIndexed =
    <idx: Unsigned> =>
        actions.wasm_type_ref_indexed(idx);

pub(crate) WasmFuncRef: A::WasmFuncRef = {
    <a:WasmFuncRefNamed> => a.into(),
    <a:WasmFuncRefIndexed> => a.into(),
};

WasmFuncRefNamed: A::WasmFuncRefNamed =
    <s:Identifier> =>
        actions.wasm_func_ref_named(s);

WasmFuncRefIndexed: A::WasmFuncRefIndexed =
    <idx: Unsigned> =>
        actions.wasm_func_ref_indexed(idx);

pub(crate) BindingRef: A::BindingRef = {
    <a:BindingRefNamed> => a.into(),
    <a:BindingRefIndexed> => a.into(),
};

BindingRefNamed: A::BindingRefNamed =
    <s:Identifier> =>
        actions.binding_ref_named(s);

BindingRefIndexed: A::BindingRefIndexed =
    <idx: Unsigned> =>
        actions.binding_ref_indexed(idx);

pub OutgoingBindingExpression: A::OutgoingBindingExpression = {
    <a:OutgoingBindingExpressionAs> => a.into(),
    <a:OutgoingBindingExpressionUtf8Str> => a.into(),
    <a:OutgoingBindingExpressionUtf8CStr> => a.into(),
    <a:OutgoingBindingExpressionI32ToEnum> => a.into(),
    <a:OutgoingBindingExpressionView> => a.into(),
    <a:OutgoingBindingExpressionCopy> => a.into(),
    <a:OutgoingBindingExpressionDict> => a.into(),
    <a:OutgoingBindingExpressionBindExport> => a.into(),
};

OutgoingBindingExpressionAs: A::OutgoingBindingExpressionAs =
    "(" "as" <ty:WebidlTypeRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_as(ty, idx);

OutgoingBindingExpressionUtf8Str: A::OutgoingBindingExpressionUtf8Str =
    "(" "utf8-str" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_utf8_str(ty, offset, length);

OutgoingBindingExpressionUtf8CStr: A::OutgoingBindingExpressionUtf8CStr =
    "(" "utf8-cstr" <ty:WebidlTypeRef> <offset:Unsigned> ")" =>
        actions.outgoing_binding_expression_utf8_c_str(ty, offset);

OutgoingBindingExpressionI32ToEnum: A::OutgoingBindingExpressionI32ToEnum =
    "(" "i32-to-enum" <ty:WebidlTypeRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_i32_to_enum(ty, idx);

OutgoingBindingExpressionView: A::OutgoingBindingExpressionView =
    "(" "view" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_view(ty, offset, length);

OutgoingBindingExpressionCopy: A::OutgoingBindingExpressionCopy =
    "(" "copy" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_copy(ty, offset, length);

OutgoingBindingExpressionDict: A::OutgoingBindingExpressionDict =
    "(" "dict" <ty:WebidlTypeRef> <fields:OutgoingBindingExpression*> ")" =>
        actions.outgoing_binding_expression_dict(ty, fields);

OutgoingBindingExpressionBindExport: A::OutgoingBindingExpressionBindExport =
    "(" "bind-export" <ty:WebidlTypeRef> <binding:BindingRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_bind_export(ty, binding, idx);

pub IncomingBindingExpression: A::IncomingBindingExpression = {
    <a:IncomingBindingExpressionGet> => a.into(),
    <a:IncomingBindingExpressionAs> => a.into(),
    <a:IncomingBindingExpressionAllocUtf8Str> => a.into(),
    <a:IncomingBindingExpressionAllocCopy> => a.into(),
    <a:IncomingBindingExpressionEnumToI32> => a.into(),
    <a:IncomingBindingExpressionField> => a.into(),
    <a:IncomingBindingExpressionBindImport> => a.into(),
};

IncomingBindingExpressionGet: A::IncomingBindingExpressionGet =
    "(" "get" <idx:Unsigned> ")" =>
        actions.incoming_binding_expression_get(idx);

IncomingBindingExpressionAs: A::IncomingBindingExpressionAs =
    "(" "as" <ty:WasmTypeRef> <expr:IncomingBindingExpression> ")" =>
        actions.incoming_binding_expression_as(ty, expr);

IncomingBindingExpressionAllocUtf8Str: A::IncomingBindingExpressionAllocUtf8Str =
    "("
        "alloc-utf8-str"
        <alloc_func_name:Identifier>
        <expr:IncomingBindingExpression>
    ")" =>
        actions.incoming_binding_expression_alloc_utf8_str(alloc_func_name, expr);

IncomingBindingExpressionAllocCopy: A::IncomingBindingExpressionAllocCopy =
    "("
        "alloc-copy"
        <alloc_func_name:Identifier>
        <expr:IncomingBindingExpression>
    ")" =>
        actions.incoming_binding_expression_alloc_copy(alloc_func_name, expr);

IncomingBindingExpressionEnumToI32: A::IncomingBindingExpressionEnumToI32 =
    "(" "enum-to-i32" <ty:WebidlTypeRef> <expr:IncomingBindingExpression> ")" =>
        actions.incoming_binding_expression_enum_to_i32(ty, expr);

IncomingBindingExpressionField: A::IncomingBindingExpressionField =
    "(" "field" <idx:Unsigned> <expr:IncomingBindingExpression> ")" =>
        actions.incoming_binding_expression_field(idx, expr);

IncomingBindingExpressionBindImport: A::IncomingBindingExpressionBindImport =
    "(" "bind-import" <ty:WasmTypeRef> <binding:BindingRef> <expr:IncomingBindingExpression> ")" =>
        actions.incoming_binding_expression_bind_import(ty, binding, expr);

Unsigned: u32 = <s:r"[0-9]+"> => u32::from_str(s).unwrap();

Identifier: &'input str = <r"[a-zA-Z$][a-zA-Z0-9$_]*">;

QuotedString: &'input str = <r#""(([^\\"]|\\.)*)""#>;
