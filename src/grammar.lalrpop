use crate::actions::Actions;
use std::str::FromStr;

grammar<A>(actions: &mut A)
    where A: Actions;

pub(crate) WebidlTypeRef: A::WebidlTypeRef = {
    <a:WebidlTypeRefNamed> => a.into(),
    <a:WebidlTypeRefIndexed> => a.into(),
};

WebidlTypeRefNamed: A::WebidlTypeRefNamed =
    <s:r"[a-zA-Z$][a-zA-Z0-9$_]*"> =>
        actions.webidl_type_ref_named(s);

WebidlTypeRefIndexed: A::WebidlTypeRefIndexed =
    <idx: Unsigned> =>
        actions.webidl_type_ref_indexed(idx);

pub(crate) WasmTypeRef: A::WasmTypeRef = {
    <a:WasmTypeRefNamed> => a.into(),
    <a:WasmTypeRefIndexed> => a.into(),
};

WasmTypeRefNamed: A::WasmTypeRefNamed =
    <s:r"[a-zA-Z$][a-zA-Z0-9$_]*"> =>
        actions.wasm_type_ref_named(s);

WasmTypeRefIndexed: A::WasmTypeRefIndexed =
    <idx: Unsigned> =>
        actions.wasm_type_ref_indexed(idx);

pub(crate) ExportBindingRef: A::ExportBindingRef = {
    <a:ExportBindingRefNamed> => a.into(),
    <a:ExportBindingRefIndexed> => a.into(),
};

ExportBindingRefNamed: A::ExportBindingRefNamed =
    <s:r"[a-zA-Z$][a-zA-Z0-9$_]*"> =>
        actions.export_binding_ref_named(s);

ExportBindingRefIndexed: A::ExportBindingRefIndexed =
    <idx: Unsigned> =>
        actions.export_binding_ref_indexed(idx);

pub OutgoingBindingExpression: A::OutgoingBindingExpression = {
    <a:OutgoingBindingExpressionAs> => a.into(),
    <a:OutgoingBindingExpressionUtf8Str> => a.into(),
    <a:OutgoingBindingExpressionUtf8CStr> => a.into(),
    <a:OutgoingBindingExpressionI32ToEnum> => a.into(),
    <a:OutgoingBindingExpressionView> => a.into(),
    <a:OutgoingBindingExpressionCopy> => a.into(),
    <a:OutgoingBindingExpressionDict> => a.into(),
    <a:OutgoingBindingExpressionBindExport> => a.into(),
};

OutgoingBindingExpressionAs: A::OutgoingBindingExpressionAs =
    "(" "as" <ty:WebidlTypeRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_as(ty, idx);

OutgoingBindingExpressionUtf8Str: A::OutgoingBindingExpressionUtf8Str =
    "(" "utf8-str" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_utf8_str(ty, offset, length);

OutgoingBindingExpressionUtf8CStr: A::OutgoingBindingExpressionUtf8CStr =
    "(" "utf8-cstr" <ty:WebidlTypeRef> <offset:Unsigned> ")" =>
        actions.outgoing_binding_expression_utf8_c_str(ty, offset);

OutgoingBindingExpressionI32ToEnum: A::OutgoingBindingExpressionI32ToEnum =
    "(" "i32-to-enum" <ty:WebidlTypeRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_i32_to_enum(ty, idx);

OutgoingBindingExpressionView: A::OutgoingBindingExpressionView =
    "(" "view" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_view(ty, offset, length);

OutgoingBindingExpressionCopy: A::OutgoingBindingExpressionCopy =
    "(" "copy" <ty:WebidlTypeRef> <offset:Unsigned> <length:Unsigned> ")" =>
        actions.outgoing_binding_expression_copy(ty, offset, length);

OutgoingBindingExpressionDict: A::OutgoingBindingExpressionDict =
    "(" "dict" <ty:WebidlTypeRef> <fields:OutgoingBindingExpression*> ")" =>
        actions.outgoing_binding_expression_dict(ty, fields);

OutgoingBindingExpressionBindExport: A::OutgoingBindingExpressionBindExport =
    "(" "bind-export" <ty:WebidlTypeRef> <binding:ExportBindingRef> <idx:Unsigned> ")" =>
        actions.outgoing_binding_expression_bind_export(ty, binding, idx);

pub IncomingBindingExpression: A::IncomingBindingExpression = {
    <a:IncomingBindingExpressionGet> => a.into(),
    <a:IncomingBindingExpressionAs> => a.into(),
    <a:IncomingBindingExpressionAllocUtf8Str> => a.into(),
    <a:IncomingBindingExpressionAllocCopy> => a.into(),
    // <a:IncomingBindingExpressionEnumToI32> => a.into(),
    // <a:IncomingBindingExpressionField> => a.into(),
    // <a:IncomingBindingExpressionBindImport> => a.into(),
};

IncomingBindingExpressionGet: A::IncomingBindingExpressionGet =
    "(" "get" <idx:Unsigned> ")" =>
        actions.incoming_binding_expression_get(idx);

IncomingBindingExpressionAs: A::IncomingBindingExpressionAs =
    "(" "as" <ty:WasmTypeRef> <expr:IncomingBindingExpression> ")" =>
        actions.incoming_binding_expression_as(ty, expr);

IncomingBindingExpressionAllocUtf8Str: A::IncomingBindingExpressionAllocUtf8Str =
    "("
        "alloc-utf8-str"
        <alloc_func_name:r"[a-zA-Z$][a-zA-Z0-9$_]*">
        <expr:IncomingBindingExpression>
    ")" =>
        actions.incoming_binding_expression_alloc_utf8_str(alloc_func_name, expr);

IncomingBindingExpressionAllocCopy: A::IncomingBindingExpressionAllocCopy =
    "("
        "alloc-copy"
        <alloc_func_name:r"[a-zA-Z$][a-zA-Z0-9$_]*">
        <expr:IncomingBindingExpression>
    ")" =>
        actions.incoming_binding_expression_alloc_copy(alloc_func_name, expr);

Unsigned: u32 = <s:r"[0-9]+"> => u32::from_str(s).unwrap();
